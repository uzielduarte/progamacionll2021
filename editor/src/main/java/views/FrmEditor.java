/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import io.IOString;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import say.swing.JFontChooser;
import views.panels.PnlTextEditor;

/**
 *
 * @author UZIEL
 */
public class FrmEditor extends javax.swing.JFrame
{
    private int countTab;
    private JFileChooser fileChooser;
    private FileNameExtensionFilter fileNameFileFilter;
    private IOString ioString;
    private JFontChooser fontChooser;
    /**
     * Creates new form FrmEditor
     */
    public FrmEditor()
    {
        countTab = 1;
        fileNameFileFilter = new FileNameExtensionFilter("*.TXT", "txt");
        initComponents();
    }

    public JFileChooser getFileChooser()
    {
        if(fileChooser == null)
        {
            fileChooser = new JFileChooser();
            fileChooser.addChoosableFileFilter(fileNameFileFilter);
            fileChooser.setFileFilter(fileNameFileFilter);
        }
        return fileChooser;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        tbpContent = new javax.swing.JTabbedPane();
        jToolBar1 = new javax.swing.JToolBar();
        btnCloseTab = new javax.swing.JButton();
        tglBold = new javax.swing.JToggleButton();
        tglJustify = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        mnNew = new javax.swing.JMenuItem();
        mnOpen = new javax.swing.JMenuItem();
        mnSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mniTextFormat = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().add(tbpContent, java.awt.BorderLayout.CENTER);

        jToolBar1.setRollover(true);

        btnCloseTab.setText("X");
        btnCloseTab.setFocusable(false);
        btnCloseTab.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCloseTab.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCloseTab.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCloseTabActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCloseTab);

        tglBold.setText("Bold");
        tglBold.setFocusable(false);
        tglBold.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tglBold.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tglBold.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tglBoldActionPerformed(evt);
            }
        });
        jToolBar1.add(tglBold);

        tglJustify.setText("Justify");
        tglJustify.setFocusable(false);
        tglJustify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tglJustify.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tglJustify.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tglJustifyActionPerformed(evt);
            }
        });
        jToolBar1.add(tglJustify);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        mnFile.setText("File");

        mnNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconfinder_Add_132335.png"))); // NOI18N
        mnNew.setText("New");
        mnNew.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnNewActionPerformed(evt);
            }
        });
        mnFile.add(mnNew);

        mnOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnOpen.setText("Open");
        mnOpen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnOpenActionPerformed(evt);
            }
        });
        mnFile.add(mnOpen);

        mnSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnSaveAs.setText("Save as");
        mnSaveAs.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnSaveAsActionPerformed(evt);
            }
        });
        mnFile.add(mnSaveAs);
        mnFile.add(jSeparator1);

        mnExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnExit.setText("Exit");
        mnExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnExitActionPerformed(evt);
            }
        });
        mnFile.add(mnExit);

        jMenuBar1.add(mnFile);

        jMenu2.setText("Edit");

        mniTextFormat.setText("Text Format");
        mniTextFormat.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mniTextFormatActionPerformed(evt);
            }
        });
        jMenu2.add(mniTextFormat);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(418, 347));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mnNewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnNewActionPerformed
    {//GEN-HEADEREND:event_mnNewActionPerformed
        // TODO add your handling code here:
        PnlTextEditor pnlTextEditor = new PnlTextEditor();
        tbpContent.add("Editor" + countTab++, pnlTextEditor);
    }//GEN-LAST:event_mnNewActionPerformed

    private void btnCloseTabActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCloseTabActionPerformed
    {//GEN-HEADEREND:event_btnCloseTabActionPerformed
        // TODO add your handling code here:
        if(tbpContent.getComponentCount() <= 0)
            return;
        int option = JOptionPane.showConfirmDialog(null, "Are u sure you wanna delete this tab",
                "Confirm Dialog", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(option == 1)
            return;
        
        int index = tbpContent.getSelectedIndex();
        tbpContent.remove(index);
    }//GEN-LAST:event_btnCloseTabActionPerformed

    private void mnSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnSaveAsActionPerformed
    {//GEN-HEADEREND:event_mnSaveAsActionPerformed
        // TODO add your handling code here:
        PnlTextEditor pnlEditor = (PnlTextEditor) tbpContent.getSelectedComponent();
        int index = tbpContent.getSelectedIndex();
        
        if(pnlEditor == null)
            return;
        
        try
        {
            int option = getFileChooser().showSaveDialog(this);
        
            if(option == JFileChooser.CANCEL_OPTION)
                return;

            File file = getFileChooser().getSelectedFile();
            ioString = new IOString(file);
            
            ioString.writeString(pnlEditor.getTxtpEditor().getText(), false);
            
            tbpContent.setTitleAt(index, file.getName());
        } catch (IOException ex)
        {
            Logger.getLogger(FrmEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnSaveAsActionPerformed

    private void mnExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnExitActionPerformed
    {//GEN-HEADEREND:event_mnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_mnExitActionPerformed

    private void mnOpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnOpenActionPerformed
    {//GEN-HEADEREND:event_mnOpenActionPerformed
        // TODO add your handling code here:
        int option = getFileChooser().showOpenDialog(this);
        if(option == JFileChooser.CANCEL_OPTION)
            return;
        File file = getFileChooser().getSelectedFile();
        ioString = new IOString(file);
        
        PnlTextEditor pnlEditor = new PnlTextEditor();
        try
        {
            pnlEditor.getTxtpEditor().setText(ioString.readString());
        } catch (IOException ex)
        {
            Logger.getLogger(FrmEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        tbpContent.addTab(file.getName(), pnlEditor);
    }//GEN-LAST:event_mnOpenActionPerformed

    private void mniTextFormatActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mniTextFormatActionPerformed
    {//GEN-HEADEREND:event_mniTextFormatActionPerformed
        PnlTextEditor pnlEditor = (PnlTextEditor) tbpContent.getSelectedComponent();
        if(pnlEditor == null)
            return;
        int option = getFontChooser().showDialog(this);
        if(option == JFontChooser.CANCEL_OPTION)
            return;
        String text = pnlEditor.getTxtpEditor().getSelectedText();
        if(text == null)
            return;
        Font font = getFontChooser().getSelectedFont();
        int start = pnlEditor.getTxtpEditor().getSelectionStart();
        StyledDocument style = pnlEditor.getTxtpEditor().getStyledDocument();
        pnlEditor.getTxtpEditor().setStyledDocument(getStyledDocumt(font, style, start, text.length()));
    }//GEN-LAST:event_mniTextFormatActionPerformed

    private void tglBoldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tglBoldActionPerformed
    {//GEN-HEADEREND:event_tglBoldActionPerformed
        // TODO add your handling code here:
        PnlTextEditor pnlEditor = (PnlTextEditor) tbpContent.getSelectedComponent();
        if (pnlEditor == null) {
            return;
        }

        String text = pnlEditor.getTxtpEditor().getSelectedText();
        if (text == null) {
            return;
        }

        int start = pnlEditor.getTxtpEditor().getSelectionStart();
        StyledDocument style = pnlEditor.getTxtpEditor().getStyledDocument();

        Font font = new Font(Font.SERIF, tglBold.isSelected() ? Font.BOLD : Font.PLAIN, 12);        
        pnlEditor.getTxtpEditor().setStyledDocument(getStyledDocumt(font,style, start, text.length()));
    }//GEN-LAST:event_tglBoldActionPerformed

    private void tglJustifyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tglJustifyActionPerformed
    {//GEN-HEADEREND:event_tglJustifyActionPerformed
        // TODO add your handling code here:
        PnlTextEditor pnlEditor = (PnlTextEditor) tbpContent.getSelectedComponent();
        if (pnlEditor == null) {
            return;
        }

        String text = pnlEditor.getTxtpEditor().getSelectedText();
        if (text == null) {
            return;
        }

        int start = pnlEditor.getTxtpEditor().getSelectionStart();
        StyledDocument style = pnlEditor.getTxtpEditor().getStyledDocument();

            MutableAttributeSet as = getMutableAttributeSet(style,start);

            //SimpleAttributeSet sas = new SimpleAttributeSet();

            //StyleConstants.setAlignment(as, StyleConstants.ALIGN_JUSTIFIED);
            as.addAttribute(StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);
            pnlEditor.getTxtpEditor().getStyledDocument().setCharacterAttributes(start, text.length(), as, true);

            pnlEditor.getTxtpEditor().setStyledDocument(style);
            
    }//GEN-LAST:event_tglJustifyActionPerformed

    private StyledDocument getStyledDocumt(Font font, StyledDocument style, int start, int length)
    {
        MutableAttributeSet attributeSet = getMutableAttributeSet(style, start);
        attributeSet.addAttribute(StyleConstants.Bold, font.isBold());
        attributeSet.addAttribute(StyleConstants.Italic, font.isItalic());
        attributeSet.addAttribute(StyleConstants.Size, font.getSize());
        attributeSet.addAttribute(StyleConstants.Family, font.getFamily());
        attributeSet.addAttribute(StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);
        
        style.setCharacterAttributes(start, length, attributeSet, true);
        
        return style;
    }
    
    private MutableAttributeSet getMutableAttributeSet(StyledDocument style, int stat)
    {
        Element element = style.getCharacterElement(stat);
        AttributeSet as = element.getAttributes();
        
        return new SimpleAttributeSet(as.copyAttributes());
    }
    public JFontChooser getFontChooser()
    {
        if(fontChooser == null)
            fontChooser = new JFontChooser();
        return fontChooser;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(FrmEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(FrmEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(FrmEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(FrmEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new FrmEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCloseTab;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem mnExit;
    private javax.swing.JMenu mnFile;
    private javax.swing.JMenuItem mnNew;
    private javax.swing.JMenuItem mnOpen;
    private javax.swing.JMenuItem mnSaveAs;
    private javax.swing.JMenuItem mniTextFormat;
    private javax.swing.JTabbedPane tbpContent;
    private javax.swing.JToggleButton tglBold;
    private javax.swing.JToggleButton tglJustify;
    // End of variables declaration//GEN-END:variables
}
